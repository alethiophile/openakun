* Things to do
** DONE Set up real per-instance configuration
   CLOSED: [2017-09-25 Mon 19:46]
 - Set database url, secret key?
   - This file may well end up with secret info in it, be careful
 - Not debug mode; that can only be set by the envar
 - Some verbosity level, though
   - Engine echo SQL?
 - Sentry DSN, once that's integrated
 - Password hash parameters (hash, security level)
   - Don't allow the known bad ones
*** TODO add Flask config to openakun.cfg
 - Have a section Flask that gets dumped into flask config
   - ast.literal_eval to get around the issue with strings vs. Python
     objects
** TODO Write view/post story functions
 - Need to add functionality for votes
 - Vote function:
   - realtime engine messages: vote, un-vote, create new option, create new
     writein, edit writein
   - to client messages: tally changed, new option/writein created, option
     killed, writein edited
   - while vote is active, numbers are tracked in Redis; when closed, copied to
     Postgres
   - when vote is rendered, need to show which options current user is voting
     for
*** TODO display posts better
 - include date of posting
*** TODO set up UI for chapters
*** TODO tune Quill editors for real markup abilities
 - incl. achievement links
** DONE Realtime engine: chat
** TODO Realtime engine: votes
 - [X] Create votes on client, send as author
 - [X] Allow voting
 - [X] Server-side render for closed votes
 - [ ] allow closing votes (by author only)
   - this can be a post endpoint maybe? doesn't matter
 - [ ] differentiate closed votes in style
 - [ ] implement hidden totals on client side
 - [ ] make votes reorder by total (if not hidden)
 - [ ] allow killing votes
 - [ ] allow adding writeins
 - [ ] allow setting vote config on creation time
 - [ ] handle voted-for for server-side-rendered votes

The vote subsystem has several entities: channel (bound to story), vote and
option. The channel is the basis of authentication: permission to chat in a
story's channel is equivalent to permission to vote in that story's votes. A
channel may have many votes, and a vote may have many options.

Redis maintains the following state:

 - a "channel_votes:{channel_id}" set, which contains the IDs of every active
   vote in a channel
 - a "vote_options:{vote_id}" set, which contains the IDs of every option on a
   vote
 - a "vote_config:{vote_id}" string, which is JSON containing the vote
   configuration options
 - an "options_killed" hash, with keys option_id and values kill_text string (if
   empty string, this corresponds to killed=True, kill_text=None)
 - an "option_votes:{option_id}" set, which contains the IDs of the users voting
   for an option

A vote or unvote message contains: { 'channel': channel_id, 'vote': vote_id,
'option': option_id }. When receiving such a message, the backend verifies:

1. that the sending user (authenticated or anon) has permission to vote in this
   channel's votes
   - this just means "not on the banlist"
   - this step also verifies that the given channel exists/is active
   - implemented by the decorator "with_channel_auth"
2. that the given vote belongs to the given channel (and is active)
   - use Redis set on key "channel_votes:{channel_id}", which contains every
     active vote on a given channel
3. that the given option belongs to the given vote
   - use Redis set on key "vote_options:{vote_id}", which contains every active
     option
4. that the given option has not been killed
   - how to handle killed options? correct action if option is killed is just to
     ignore votes for it, same as if option is invalid; however, killed options
     still need to show up when fetching vote data
   - possibly just a "options_killed" hash w/ kill text values? empty string
     here corresponds to "killed, but no kill string"

If all of the above conditions obtain, then the backend will carry out the
vote/unvote. The votes for a given option are stored in a set under the key
"option_votes:{option_id}". The members of the set are either anon IDs (IP
address hashes) or strings like "user:{user_id}". This is derived directly from
the sending user, not from the message itself. Vote/unvote simply correspond to
Redis sadd/srem. If the sending user was already in/not in the set, then these
are NOOPs (and redis will return 0 from the sadd/srem operation). In this case,
no further action is taken. If the set action was not a NOOP, then the function
takes the SCARD (which will correspond to number of votes) and sends a message
like "option_vote_total" to the channel. That message has: { 'vote': vote_id,
'option': option_id, 'vote_total': total }. The frontend can use this to update
the vote display. This message is only sent if the votes_hidden option is not
set for that vote.

If multivote is disabled, then voting when you have voted already implies
unvoting the previously voted option. To aid in this, if multivote is disabled,
a set of keys "user_votes:{vote_id}:{user_id}" is maintained. (This is a group
of string keys, rather than a hash, due to atomicity concerns.) The user_id
values are the same ID strings in the option_votes sets; the key values are vote
options. If a user has voted already in a non-multivote vote, then:

1. their previous vote is undone, i.e. they are removed from the
   "option_votes:{option_id}" set for that option
2. their entry in "user_votes:{vote_id}:{user_id}" is switched to the new vote
3. option_vote_total messages are sent both for the old and new votes

If we later want to count anon and verified votes separately, we can split this
into two sets ("option_user_votes", "option_anon_votes", I guess) pretty
trivially. This is preferable to fetching the entire set from Redis in order to
count in server code.

A vote is created by the author calling the /new_post POST endpoint with a post
of type Vote. This has all the usual authentication of author posting; on the
frontend it uses the vote editor. The new_post handler calls the add_active_vote
function, which takes trusted arguments (!). It does the following setup tasks:

1. adds the given vote_id to the correct "channel_votes:{channel_id}" set
2. adds the option_id of every initial option to the corresponding
   "vote_options:{vote_id}" set
3. adds the vote configuration options to a dictionary "vote_config:{vote_id}".
   This will contain the Vote attributes multivote, writein_allowed, and
   votes_hidden.

New options can be created by users by sending the 'new_vote_entry' message over
the channel. The new_vote_entry message contains: { 'channel': channel_id,
'vote': vote_id, 'vote_info': voteinfo } (where voteinfo is a vote dictionary as
used by the frontend and the Vote constructor). voteinfo will not contain any
db_id, but this method might have a browser token for client receipt
verification (not going to bother for now).

The new vote handler verifies:

1. the given channel is valid and the sending user has permission to post in it
   - handled by with_channel_auth
2. the given vote belongs to the given channel, and is active
   - Redis channel_votes set
3. the given vote allows writein options
   - fetch from the vote_config keys

If all these checks pass, then the vote option is added. The option data is
added to Postgres immediately. After receiving an option_id from Postgres, the
handler does the following:

1. the vote_count from the client voteinfo is coerced to 1, and a
   vote_entry_added message is sent to the channel
2. The option_id is added to the "vote_options:{vote_id}" set
3. The "option_votes:{option_id}" is initialized with the ID of the sending user

Submitting a new vote is assumed to include voting for it; if a user does not
want this, they can unvote it.

** TODO Figure out E-mail
 - How to test this?
 - Make it an optional item; if you want you can run an instance without using
   it at all
   - In that case, let users not provide it?
*** TODO Write E-mail verification/password recovery code
 - Works by sending a random token to the E-mail given
 - Store tokens + expirations in a table (or two?)
   - Table: hashed token, user, expiration, purpose
   - Periodically clean DB of expired tokens
 - A route for each purpose (verify, reset password) with tokens in
   GETDATA
   - Also have ID for token table entry
 - Can only use E-mail to reset password if E-mail is already verified
   - Actually, this applies to sending any E-mail at all
** DONE Write test suite
   CLOSED: [2017-09-25 Mon 19:51]
** DONE Write a real frontend
 - CSS is awful
** DONE Make per-instance configuration better
 - How to find the configuration file?
** TODO Write more tests
 - Test the anti-XSS backend lots; look for lists of test cases
 - How to test realtime engine?
** DONE Figure out Sentry, add a setup
 - May wait until I've got a public instance
** TODO Set up good static file serving
 - Hash in URL path (probably just sha512)
   - Break up by path, something like 01/23/456789ab(...)f.filename.js or
     whatever
   - Configure nginx so that it gives the last bit as content-disposition
     filename
 - From inside app, identify files by hash (write an auxiliary url_for)
 - Use for both assets (js/css) and images; mostly latter
 - Configure caching with very long TTL; the same URL will never change, because
   hash
 - Good synergy with a CDN, if we ever do that
 - Method: files just go under static/ during development; have a function to
   take a hash and get a proper static url; static resources can just be
   identified by hash; images store hash in DB, fetch as necessary
 - separate origins for static and images (configurable in site config)
 - Cache-Control: max-age=31536000, immutable, no-transform
** TODO Think about routes, dice
 - Routes: list of chapters? chapter DAG? how to deal with contents listing?
   - Normal case is still single throughout, make sure not to compromise that
   - Would be nice for routes to be a bit less of an afterthought, though
 - Dice: how? just another variant of posts, QM can post rolls?
   - what options? make sure to include best- or worst-of-n, that's a popular
     one
   - players able to roll dice? in chat, e.g.?
** TODO autodiscover proxy setup on install
 - Probably only doable once there's a web-based installer
 - Check the remote IP/access_route, display it to user, ask them which entries
   are their configured reverse proxies
 - Use this to configure ProxyFix or similar
** TODO Set up per-deploy salt for IP hashes
 - Since anons are identified by IP hash, need to be sure people can't just
   brute-force it
 - Add a consistent server-side salt that's appended first
 - Probably shouldn't just make it the secret key; that can implicitly be
   changed, whereas salt will break all anon-identifying functions if it changes
 - Store in database? A "config" table?
** TODO Image storage considerations
 - Images are stored in static area by hash, as above
 - Also stored in DB; save hash name/path, which user uploaded, thumbnails
 - Generate thumbnails at upload time
 - In stories/topics, have normal <img> tags with src= pointing to the static area
   - In bleach rules, allow only img tags pointing to that area
 - In chat, have an "image" attribute with URL, which JS renders into an img tag
   at receive time
 - Image upload dialog: three choices: upload local, use URL, use your prior image
   - hence uploader tag on image in DB
   - How to deal with multiple users uploading same image? Plain many-to-many
     relationship?
   - Log every image uploaded
** DONE Set up Redis for caching
 - Start with caching channel auth, rather than the MAC setup
 - Redis needs to be set with AOF persistence for chat correctness
*** TODO Consider making Redis optional?
** TODO Set up Celery for periodics
 - [X] Add Celery, set up code
 - [X] Use to sweep chats from redis into DB
 - [ ] Use to delete expired rows in tokens table
 - [ ] Use for E-mail sending
** TODO Figure out Content-Security-Policy
 - [-] Split out as much JS code as possible, put in static scripts
   - [X] vote JS
   - [ ] chat JS
 - [ ] Static scripts can be served from separate origin (subdomain), maybe just
   same as main site
 - [ ] Images should be separate from this (in particular, not allowed as
   resources), since users can upload them and heaven knows someone's probably
   got a polyglot of JS/GIF somewhere
 - [X] For inline scripts (used to communicate to client-side), use nonce; pattern
   is like CSRF tokens, except in g (ephemeral per request) rather than session
   - [X] May need to use an after_request function to add necessary headers
 - [-] Make it configurable; do CSP off/report-only/on
   - [X] add basic configuration
   - [ ] make enforcing CSP keep reporting
 - [-] Set up receiving reports; log these through the normal event log
   - Need an "urgent" flag on the log
   - [ ] log through native event log
   - [X] log through Sentry

* Requirements before test deployment
** DONE Set up error logging (Sentry)
** TODO User profile, account management
** DONE Chapter UI
** DONE Fix UI arrangement
** TODO Log user actions
** TODO User privileges for log viewing

* Design
** Realtime engine architecture
 - Based on socketIO/eventlet (Flask-SocketIO)
 - That provides rooms already, supports most chat functionality
 - For "rooms", each story gets one, so does each user
   - Story funnels story chat, live updates/edits, votes
   - User funnels PM chat, followed story updates
 - For user actions that will come back through a room, use own ping to confirm
   receipt (UI like Discord, show it greyed out or something)
   - How to ensure consistent states?
   - Should probably implement ack'd messages in any case (dumb and slow across
     TCP, but should handle disconnect/reconnect, refresh, &c.)
     - How does this work with rooms?
 - Realtime actions mostly go via Redis; copied to main DB in batch mode
   - Chat messages go in Redis on receipt (and are re-broadcast), Celery task
     copies them to DB once per minute
   - Chat backlog requests come from Redis
   - Active votes are stored in Redis exclusively while active, copied to DB
     when QM closes the vote
   - If QM reopens a vote, data from DB is copied back to Redis again for
     duration
 - For story chat, the SocketIO room is simply the story's channel ID
 - For PM chat, a separate channel in the DB is made for each pair of users who
   PM, but updates via SocketIO are funneled via the user's room (thus the
   equivalence between channel and room is broken)

** Database schema
 - Users, stories, chapters, posts, as current
   - Story: need to add word count, last updated, live and live timer
   - User: add whether E-mail is verified
 - Vote schema:
   - Store per vote: vote settings like multivote/hidden vote; start and end
     times; active status
   - Store per vote entry: who's voting for it; whether it's been killed by QM;
     kill message if any; who created it? (is this necessary?)
   - Store per write-in: who created it
 - Chat messages, private chat messages
   - Probably have a "conversations" table to facilitate private
   - Chat: "messages" table, "rooms" table
   - Messages is obvious
   - Rooms are what hold messages; each story has a room; private chats create a
     room private to the users involved
     - Make sure to have proper access controls on those
     - "Room" has a column "private" boolean for whether it's access-controlled;
       then also a many-to-many table rooms to users
   - This can potentially support creating arbitrary rooms, later, but that's
     maybe extraneous
 - User settings (probably just on the current User table?)
   - "is currently anon" as a setting?
   - Possible: anons can do settings too, in session object
 - Author/story follows
   - Have these as separate notions?
 - Log of actions
   - Log: users logging in/out, all user info changes, user email verification
     (registration is implicit in the user row), all stages of password reset
     process, all edits to posts?, any HTML sanitization failures (log those in
     Sentry too?), 
   - Rate limiting: refer to log, possibly optimize via redis
   - Limit: stories created/time, stories live at once, chat messages/time (high
     limit, maybe 30/min), password reset attempts/time, login attempts/time,
     topics created/time
   - Log structure: timestamp, object type, object ID, user ID, event type,
     info, urgency flag, seen flag
 - Achievements, which users have seen which achievements
 - Votes/writeins
   - Each vote as a separate entry? store who votes for what, anons?
 - Anon sessions? Implicit user data by IP?
 - Bans (many-many, story to user-or-anon)
 - Reviews, likes

** Markup text
 - To avoid XSS, we're very strict about what markup user-generated text can contain
 - Fields that allow markup are text posts, story descriptions only (other
   user-generated text is universally HTML-escaped via jinja2)
 - For user-generated markup, HTML is processed via bleach, which is a
   whitelist-based sanitization library
 - Allowed tags are only:
   - basic inline markup: i, em, b, strong, s, strike
   - basic other markup: br, ul, ol, li, p
   - images: only allowed from the configured image origin (all images are
     mirrored and served by openakun); only attribute allowed is 'src'
   - achievements: implemented with 'a' tag, no 'href' ever allowed, passes
     'class="achieve-link"' and 'data-achieve="name"' only
 - HTML is scanned on upload; if any forbidden elements are found, the request
   is denied and logged
 - On client end, rich text editor generates known-good HTML; HTML
   cleaning/scanning should be transparent to ordinary users
* Feature requests
 - Ability to delete writeins
 - Ability to change multivote and writein permission on a vote
   without closing and redoing it
   - How to deal with existing multivotes if turning multivote off?
     Just don't allow that?
 - Ability to hide writein sections while reading through
 - Display votes in descending order after close, even if they had hidden vote
   totals while open

* UI elements
 - Site main page link, possibly logo/brand
 - Site main menu
   - Another home link, view categories, about page, post new story
   - Maybe some user preferences like posting as anon or light/dark theme
     - Use [[https://github.com/thomaspark/bootswatch][Bootswatch]] for themes
 - Story main menu
   - Like/follow/review, display preferences?
   - Contents page
     - Some routes UI here, if doing that
 - User prefs area, login link if not logged in, link to profile if so
* Deploy process
 - Need to install:
   - postgresql-server
   - postgresql-devel
   - certbot
   - nginx
   - firewall (ufw or firewalld)
   - redis
   - build-essential (~yum groupinstall "Development Tools"~)
   - python38
   - python38-devel
   - openssl-devel
 - Set up nginx for reverse proxying
   - HTTP proxy
 - Create a virtualenv and activate it
 - Get the dist and run: ~pip3 install --upgrade openakun-x.y.z.tar.gz~
 - run the worker:
   - in development, you run:
     ~celery -A openakun.tasks.queue worker --loglevel INFO -B~
     which runs the beat scheduler in the same process as a single worker
   - in production, you need to run ~celery beat~ in a separate process, and
     maybe multiple workers for load-sharing
 - run the server:
   ~openakun_server~

** Production DB notes

I expect the recommended procedure for a production deployment will be to check
out the corresponding version tag from Git and have alembic and poetry
installed. This will ensure the alembic files come along, and at a given frozen
state poetry and alembic can work fine. Upgrades will be handled by 1. checking
out the new version tag, 2. doing ~poetry install~ to ensure all dependencies
are up-to-date, 3. doing ~alembic upgrade~ to pull the DB up. Whether this can
be done with site active is yet to be determined. The Redis DB should mostly not
be any concern, since the goal is to make it capable of freezing to Postgres
without loss of data.
